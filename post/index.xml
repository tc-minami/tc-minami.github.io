<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ノマドコーダー</title>
    <link>https://tc-minami.github.io/post/</link>
    <description>Recent content in Posts on ノマドコーダー</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 15 Dec 2018 12:38:33 +0700</lastBuildDate>
    
	<atom:link href="https://tc-minami.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugoに自作CSSを適用する方法</title>
      <link>https://tc-minami.github.io/2018/12/hugo%E3%81%AB%E8%87%AA%E4%BD%9Ccss%E3%82%92%E9%81%A9%E7%94%A8%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 15 Dec 2018 12:38:33 +0700</pubDate>
      
      <guid>https://tc-minami.github.io/2018/12/hugo%E3%81%AB%E8%87%AA%E4%BD%9Ccss%E3%82%92%E9%81%A9%E7%94%A8%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</guid>
      <description>以前Hugoでブログはじめました～！って時に色の付け方がわからないとか言ってましたが、思ったより簡単に出来たので方法をまとめておきます。
以前の記事で触れてたフォントの変更方法もわかったけど、そもそも使いたいフォントを探していないので今回はスルーします。（）
自作CSSを適用するために必要なもの  自作CSS
以上。  今回は以下な感じでどシンプルなcssを書いてみました。
/* Basic css for Text related things. Color info https://www.wanichan.com/web/resources/color.html */ span.b { font-weight: bold; } span.red { color: orangered; } span.gray { color: darkgray; } span.large { font-size: 1.5em; } span.small { font-size: 0.75em; } span.ul { border-bottom: solid 3px;} span.ul-red { border-bottom: solid 3px orangered;} span.ul-gray { border-bottom: solid 3px darkgray;} span.dul { border-bottom: dotted 3px;} span.slash { text-decoration: line-through; }  自作CSSを適用する方法  プロジェクト直下のstaticフォルダ配下にcssファイルを配置する。  画像ファイル等を置いているstaticフォルダを同じ場所です。  themes以下でcssを取り込んでいるhtmlファイルを検索する。  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;で検索し、他のcssを取り込んでいる場所を探しました。 そこに自作したcssを取り込むコードを以下のように記述するだけで、一瞬で反映されます。   CSSを取り込むコードのサンプル</description>
    </item>
    
    <item>
      <title>画像の管理について</title>
      <link>https://tc-minami.github.io/2018/12/%E7%94%BB%E5%83%8F%E3%81%AE%E7%AE%A1%E7%90%86%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Thu, 13 Dec 2018 01:16:14 +0700</pubDate>
      
      <guid>https://tc-minami.github.io/2018/12/%E7%94%BB%E5%83%8F%E3%81%AE%E7%AE%A1%E7%90%86%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>画像の管理について気になったこと 先日Hugoを触り始めて、ようやくGitHub Pagesに反映+公開が終わったけれども…ブログの管理で1つ懸念があったため調査してみました。
それはファイル容量制限とか大丈夫なん？という点です。
軽く調べた所、Hugo的には↓のようにstaticフォルダ配下に画像を置いて、「ファイルパス使ってそこ参照してね♪」ってなってるっぽい。
一般的にはそれで問題ないと思うけどGitHub Pages使っている以上あまり重たいファイルはリポジトリ内に置きたくなかったりするので、なんとか別の方法を考えてみることに…。
[Hugoのフォルダ構成] GitHubを使った画像管理方法 DropboxやらGoogleDriveやら、無料で使えそうなサービスはいくつかあったのですが、今回せっかく全てをGitHubに寄せているのでファイル管理もGitHubに丸投げすることにしました。
実はGitHubのIssueって画像や動画をドラッグ＆ドロップするだけでGitHub側が勝手にUploadしてくれて、URLまで出力してくれます。そのため今回はリソースファイル専用のRepositoryとIssueを立てて、そこに各種ファイルをUpしてみることにしました。
[GitHubに画像をUploadする方法] ※恐らくRepositoryを分ける必要はないと思うのですが、GitHub的に1Repositoryで1GBを超えるのは好ましくないようなので、念の為切り分けてあります。
※Issueに貼り付けた画像がこの容量としてカウントされるのかは不明です。</description>
    </item>
    
    <item>
      <title>Hugo &#43; GitHub Pagesでブログ作成してみた件</title>
      <link>https://tc-minami.github.io/2018/12/hugo-github-pages%E3%81%A7%E3%83%96%E3%83%AD%E3%82%B0%E4%BD%9C%E6%88%90%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F%E4%BB%B6/</link>
      <pubDate>Wed, 12 Dec 2018 08:00:00 +0700</pubDate>
      
      <guid>https://tc-minami.github.io/2018/12/hugo-github-pages%E3%81%A7%E3%83%96%E3%83%AD%E3%82%B0%E4%BD%9C%E6%88%90%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F%E4%BB%B6/</guid>
      <description> 見切り発車満載ですが、以前まで試していた自作CSSでのブログ開発は一旦止めて、Hugoを使ってブログを進めてみようかと思います。
なぜHugoに変更するか Hugo自体がどれだけ凄いのか、とは他の選択肢は？というのは正直よくわかっていません。現状言えるのは今のブログのトレンドが静的サイトジェネレーターを使うっぽいという事と、単にHugoという名前をよく見かけたからです。
なのでとりあえずはHugoを使って色々試して、もしかしたらまた何かに以降する可能性はあります。今の所は手軽にブログが書けて、三日坊主にならない方法を模索したい感じですね。 （前回はCSSの勉強、というよりデザインのダメダメさ、がキツくて意欲だだ下がりしていたので…）
Hugoの凄い所 今回初めてHugoを使って、今始めての記事を書いている段階で何を知ったかぶっているんだという感はありますが、現段階で言えるのはHugoなら気軽にブログ続けられそうかな…？という点です。
現段階でいくつかHugoいいなー、便利だなー、って思うことは多々あるのですが、移行の一番のきっかけとなったのが以下の3点です。
1. デザインの調整が後からでも楽そう 大元の設定ファイルでテーマ切り替えしたり、レイアウトも調整できるらしいのでまずは流行ってそうなテーマダウンロードしてそのまま使っています。
なので大部分（名前とかリンクとか）はサンプルのままですが、そのうち調整するのでスルーしておいてください…。
2. マークダウンで記事がかける Web関係からっきしの私からして非常に助かるのがコレ。
なんとHugoはHTML/CSS知識不要で簡単に記事作成出来ます。
（今もマークダウンで書いてます）
もちろん将来的にはCSSを調整したり、細かい演出系はHTMLで直接書いたほうが良いんでしょうけど、三日坊主防止としてはかなり協力な機能だと感じています。
3. 記事管理がローカルで簡単にできる。 Web関係からっきし(ry)
コレに関しては今までの私の管理方法が悪かっただけかも知れませんが、Hugoを使う場合は各種フォルダ構成が自動で作られているため各種ファイルの管理が非常に簡単そうです。
また、.mdで記事を掛けるので、振り返った時に内容が読みやすく個人的に後から記事を編集/調整する場合楽なんだろうなーと思っています。
今はAtomで記事を書いているので、ソースコードを管理するみたいに簡単に各種ファイルを編集できるのは大きいですね。
まとめ とりあえずHugoに移行して、Github Pages使って無料でブログ運用したいなー、出来れば広告とか入れてお小遣い欲しいなーと思っていますが、まずは三日坊主にならないように頑張りたいと思います。
あと簡単な 太字、Codeの記述はいつもどおりできるけど、色文字やフォントの調整とか色々覚えていかないとですね。
 適度にがんばります。   -- </description>
    </item>
    
  </channel>
</rss>